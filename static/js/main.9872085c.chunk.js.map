{"version":3,"sources":["actions/posts.js","helpers/index.js","reducers/posts.js","actions/favourites.js","reducers/favourites.js","constants.js","reducers/status.js","reducers/index.js","middleware.js","client.js","sagas/posts.js","sagas/index.js","store.js","components/Marquee.js","components/ThemeItem.js","components/ListOfThemes.js","components/ArticleItem.js","components/ArticlesList.js","containers/ListOfArticles.js","components/ListOfArticles.js","containers/UndoRedo.js","components/UndoRedo.js","App.js","serviceWorker.js","index.js"],"names":["actionTypes","parseItem","rawItem","id","title","thumbnail","url","author","initialState","undoable","state","type","payload","update","$set","concat","slice","filter","post","dragIndex","hoverIndex","dragCard","$splice","limit","posts","statuses","combineReducers","status","favourites","index","indexOf","sagaMiddleware","createSagaMiddleware","client","get","params","a","axios","result","data","body","getPosts","postsSaga","theme","call","children","dist","randomIndex","Math","floor","random","randomArticle","put","error","message","takeEvery","rootSaga","all","persistConfig","key","storage","persistedReducer","persistReducer","reducers","Marquee","string","onClick","className","Typography","ThemeItem","value","classes","useStyle","Grid","item","paper","makeStyles","width","display","alignItems","margin","height","maxWidth","themes","useStyles","root","flexGrow","control","padding","spacing","connect","container","xs","direction","justify","map","ArticleItem","handleFavourite","removePost","isFavourite","moveCard","ref","React","useRef","useDrop","accept","hover","current","drop","useDrag","collect","monitor","isDragging","drag","gridItem","style","opacity","GridListTile","target","href","link","src","alt","GridListTileBar","subtitle","actionIcon","iconBox","IconButton","favouriteIconActive","favouriteIcon","deleteIcon","color","flexDirection","textDecoration","dragging","ArticlesList","articles","removeFromFavourites","add","setPosts","useCallback","GridList","cellHeight","gridList","idx","renderArticle","flexWrap","overflow","backgroundColor","palette","background","present","loading","DndProvider","backend","HTML5Backend","LinearProgress","canUndo","length","canRedo","dispatch","onUndo","UndoActionCreators","undo","onRedo","redo","ButtonGroup","aria-label","Button","store","createStore","applyMiddleware","middleware","run","persistor","persistStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9872085c.chunk.js","sourcesContent":["export const actionTypes = {\n    getPosts: 'posts/getPosts',\n    getPostsSuccess: 'posts/getPostsSuccess',\n    getPostsError: 'posts/getPostsError',\n    remove: 'posts/remove',\n    setPosts: 'posts/setPosts',\n};\n\nconst getPosts = (theme) => ({ type: actionTypes.getPosts, payload: theme });\nconst remove = (id) => ({ type: actionTypes.remove, payload: id });\nconst setPosts = (data) => ({ type: actionTypes.setPosts, payload: data });\n\nexport { getPosts, remove, setPosts }","export function parseItem(rawItem) {\n    return {\n        id: rawItem.id,\n        title: rawItem.title,\n        thumbnail: rawItem.thumbnail,\n        url: rawItem.url,\n        author: rawItem.author,\n    }\n}","import { actionTypes } from '../actions/posts';\nimport { parseItem } from '../helpers';\nimport update from 'immutability-helper';\nimport undoable from 'redux-undo';\n\nconst initialState = [];\n\nfunction posts(state = initialState, { type, payload }) {\n    switch (type) {\n        case actionTypes.getPostsSuccess:\n            return update(state, { $set: state.concat(parseItem(payload)) });\n        case actionTypes.remove:\n            return update(state, {\n                $set: state.slice().filter((post) => post.id !== payload),\n            });\n        case actionTypes.setPosts:\n            const { dragIndex, hoverIndex } = payload;\n            const dragCard = state[dragIndex];\n            return update(state, {\n                $splice: [\n                    [dragIndex, 1],\n                    [hoverIndex, 0, dragCard],\n                ],\n            });\n        default:\n            return state;\n    }\n}\n\nexport default undoable(posts, { limit: 10 });\n","export const actionTypes = {\n    add: 'favourite/add',\n    remove: 'favourite/remove',\n};\n\nconst add = (id) => ({ type: actionTypes.add, payload: id });\nconst remove = (id) => ({ type: actionTypes.remove, payload: id });\n\nexport { add, remove };\n","import { actionTypes } from '../actions/favourites';\nimport update from 'immutability-helper';\n\nconst initialState = {\n    posts: [],\n};\n\nexport default function favourites(state = initialState, { type, payload }) {\n    let index;\n    switch (type) {\n        case actionTypes.add:\n            index = state.posts.indexOf(payload);\n            return update(state, {\n                posts: { $set: index >= 0 ? state : state.posts.concat(payload) },\n            });\n        case actionTypes.remove:\n            index = state.posts.indexOf(payload);\n            if (index >= 0) {\n                return update(state, {\n                    posts: { $splice: [[index, 1]] },\n                });\n            }\n            return state;\n        default:\n            return state;\n    }\n}\n","export const statuses = {\n    idle: 'idle',\n    running: 'running',\n    success: 'success',\n    error: 'error',\n};\n","import { actionTypes } from '../actions/posts';\nimport { statuses } from '../constants';\n\nconst initialState = statuses.idle;\n\nexport default function status(state = initialState, { type }) {\n    switch (type) {\n        case actionTypes.getPosts:\n            return statuses.running;\n        case actionTypes.getPostsSuccess:\n            return statuses.success;\n        case actionTypes.getPostsError:\n            return statuses.error;\n        default:\n            return state;\n    }\n}\n","import posts from './posts';\nimport favourites from './favourites';\nimport status from './status';\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n    status,\n    posts,\n    favourites,\n});\n","import createSagaMiddleware from 'redux-saga'\n\nexport const sagaMiddleware = createSagaMiddleware()\n\nexport default [sagaMiddleware]","import axios from 'axios';\n\nconst API_URL = 'https://www.reddit.com/';\n\nexport const client = {\n    get: async (url, params) => {\n        try {\n            const result = await axios.get(`${API_URL}${url}`, params);\n            const { data } = result.data;\n            return data;\n        } catch (e) {\n            throw e;\n        }\n    },\n    post: async (url, body) => {\n        try {\n            const result = await axios.post(url, body);\n            const { data } = result.data;\n            return data;\n        } catch (e) {\n            throw e;\n        }\n    },\n};\n","import { call, put, takeEvery } from '@redux-saga/core/effects';\nimport { actionTypes } from '../actions/posts';\nimport { client } from '../client';\n\nfunction* getPosts({ payload: theme }) {\n    try {\n        const payload = yield call(client.get, `r/${theme}.json`);\n        const { children, dist } = payload;\n        const randomIndex = Math.floor((dist - 1) * Math.random());\n        const randomArticle = children[randomIndex];\n        yield put({ type: actionTypes.getPostsSuccess, payload: randomArticle && randomArticle.data });\n    } catch (e) {\n        yield put({ type: actionTypes.getPostsError, error: e.message });\n    }\n}\n\nexport default function* postsSaga() {\n    yield takeEvery(actionTypes.getPosts, getPosts);\n}\n","import posts from \"./posts\";\nimport { all } from '@redux-saga/core/effects';\n\nexport default function* rootSaga() {\n   yield all([\n      posts(),\n   ])\n}","import { createStore, applyMiddleware } from 'redux';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\nimport reducers from './reducers';\nimport middleware, { sagaMiddleware } from './middleware';\nimport rootSaga from './sagas';\n\nconst persistConfig = {\n    key: 'root',\n    storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nexport default () => {\n    const store = createStore(persistedReducer, applyMiddleware(...middleware));\n    sagaMiddleware.run(rootSaga);\n    const persistor = persistStore(store);\n    return { store, persistor }\n};\n\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport './styles.css';\n\nexport default function Marquee({ string, onClick }) {\n    return (\n        <div className=\"marquee\">\n            <span className=\"link link_animated\" onClick={() => onClick(string)}>\n                <Typography>{string}</Typography>\n            </span>\n        </div>\n    );\n}\n","import React from 'react';\nimport Paper from '@material-ui/core/Paper/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Marquee from './Marquee';\n\nexport default function ThemeItem({ value, getPosts }) {\n    const classes = useStyle();\n    return (\n        <Grid key={value} item className={classes.item}>\n            <Paper className={classes.paper}>\n                <Marquee string={value} onClick={getPosts}/>\n            </Paper>\n        </Grid>\n    );\n}\n\nconst useStyle = makeStyles((theme) => ({\n    item: {\n        width: '100%',\n    },\n    paper: {\n        display: 'flex',\n        alignItems: 'center',\n        margin: 'auto',\n        height: 50,\n        width: '60%',\n        maxWidth: 800,\n    },\n}));\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport ThemeItem from './ThemeItem';\nimport { connect } from 'react-redux';\nimport { getPosts } from '../actions/posts';\n\nconst themes = ['ReactJS', 'Angular', 'VueJS', 'Frontend'];\n\nfunction ListOfThemes({ getPosts }) {\n    const classes = useStyles();\n\n    return (\n        <Grid container className={classes.root} spacing={2}>\n            <Grid item xs={12}>\n                <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\n                    {themes.map((value) => (\n                        <ThemeItem value={value} key={`marquee-${value}`} getPosts={getPosts} />\n                    ))}\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: 20,\n        flexGrow: 1,\n    },\n    control: {\n        padding: theme.spacing(2),\n    },\n}));\n\nexport default connect(null, { getPosts })(ListOfThemes)","import React from 'react';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDrag, useDrop } from 'react-dnd';\n\nexport default function ArticleItem({ post, handleFavourite, removePost, isFavourite, index, moveCard }) {\n    const { thumbnail, id } = post;\n    const classes = useStyles();\n    const ref = React.useRef();\n\n    const [, drop] = useDrop({\n        accept: 'POST',\n        hover(item) {\n            if (!ref.current) {\n                return;\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n            moveCard(dragIndex, hoverIndex);\n            item.index = hoverIndex;\n        },\n    });\n\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: 'POST', id, index },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n    drag(drop(ref));\n    return (\n        <div ref={ref} className={classes.gridItem} style={{ opacity: isDragging ? 0.5 : 1 }}>\n            <GridListTile>\n                <a target=\"_blank\" href={post.url} className={classes.link}>\n                    {thumbnail && thumbnail !== 'self' ? (\n                        <img src={thumbnail} alt={post.title} className={classes.thumbnail} />\n                    ) : (\n                        <AssignmentIcon className={classes.thumbnail} />\n                    )}\n                </a>\n                <GridListTileBar\n                    title={post.title}\n                    subtitle={<span>Author: {post.author}</span>}\n                    actionIcon={\n                        <div className={classes.iconBox}>\n                            <IconButton\n                                className={isFavourite(id) ? classes.favouriteIconActive : classes.favouriteIcon}\n                                onClick={() => handleFavourite(id)}\n                            >\n                                <FavoriteIcon />\n                            </IconButton>\n                            <IconButton className={classes.deleteIcon} onClick={() => removePost(id)}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </div>\n                    }\n                />\n            </GridListTile>\n        </div>\n    );\n}\n\nconst useStyles = makeStyles(() => ({\n    thumbnail: {\n        opacity: 0.5,\n        margin: 'auto',\n        color: 'grey',\n        width: 245,\n        height: 180,\n    },\n    iconBox: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    gridItem: {\n        width: '48%',\n        margin: '1%',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    favouriteIconActive: {\n        padding: 5,\n        color: 'red',\n    },\n    favouriteIcon: {\n        padding: 5,\n        color: 'red',\n        opacity: 0.3,\n    },\n    deleteIcon: {\n        padding: 5,\n        color: 'black',\n    },\n    link: {\n        display: 'flex',\n        textDecoration: 'none !important',\n    },\n    dragging: {\n        opacity: 0.5,\n    },\n    root: {},\n}));\n","import React, { useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport ArticleItem from './ArticleItem';\n\nexport default function ArticlesList({ articles, favourites, removeFromFavourites, add, removePost, setPosts }) {\n    const classes = useStyles();\n    const moveCard = useCallback(\n        (dragIndex, hoverIndex) => {\n            setPosts({ dragIndex, hoverIndex });\n        },\n        [articles]\n    );\n\n    const handleFavourite = (id) => {\n        if (isFavourite(id)) {\n            removeFromFavourites(id);\n            return;\n        }\n        add(id);\n    };\n    const isFavourite = (id) => favourites.indexOf(id) >= 0;\n\n    const renderArticle = (post, idx) => {\n        return (\n            <ArticleItem\n                key={`post-${idx}`}\n                post={post}\n                handleFavourite={handleFavourite}\n                removePost={removePost}\n                isFavourite={isFavourite}\n                moveCard={moveCard}\n                index={idx}\n            />\n        );\n    };\n    return (\n        <div className={classes.root}>\n            {articles && (\n                <GridList cellHeight={180} className={classes.gridList}>\n                    {articles.map((post, idx) => renderArticle(post, idx))}\n                </GridList>\n            )}\n        </div>\n    );\n}\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexWrap: 'wrap',\n        alignItems: 'center',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        margin: '0 0 0 3% !important',\n        width: 800,\n    },\n}));\n","import { connect } from 'react-redux';\nimport { statuses } from '../constants';\nimport { add, remove as removeFromFavourites } from '../actions/favourites';\nimport { remove as removePost, setPosts } from '../actions/posts';\nimport ListOfArticles from '../components/ListOfArticles'\n\n\nfunction mapStateToProps(state) {\n    const { posts, favourites } = state;\n    return {\n        posts: posts.present,\n        favourites: favourites.posts,\n        loading: state.status === statuses.running,\n    };\n}\nexport default connect(mapStateToProps, { add, removeFromFavourites, removePost, setPosts })(ListOfArticles);\n","import { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport ArticlesList from './ArticlesList';\nimport { LinearProgress } from '@material-ui/core';\nimport React from 'react';\n\nexport default function ListOfArticles({ posts, loading, favourites, add, removeFromFavourites, removePost, setPosts }) {\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div>\n                <ArticlesList\n                    articles={posts}\n                    favourites={favourites}\n                    add={add}\n                    removeFromFavourites={removeFromFavourites}\n                    removePost={removePost}\n                    setPosts={setPosts}\n                />\n                {loading && <LinearProgress style={{ width: '50%', margin: '10px auto' }} />}\n            </div>\n        </DndProvider>\n    );\n}\n","import { ActionCreators as UndoActionCreators } from 'redux-undo';\nimport { connect } from 'react-redux';\nimport UndoRedo from '../components/UndoRedo';\n\nconst mapStateToProps = (state) => {\n    return {\n        canUndo: state.posts.present.length > 0,\n        canRedo: state.posts.present.length > 0,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onUndo: () => dispatch(UndoActionCreators.undo()),\n        onRedo: () => dispatch(UndoActionCreators.redo())\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UndoRedo)\n","import React from 'react'\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nexport default function UndoRedo({ onUndo, onRedo }) {\n    return (\n        <div className=\"undo-redo\">\n            <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                <Button onClick={onUndo}>Undo</Button>\n                <Button onClick={onRedo}>Redo</Button>\n            </ButtonGroup>\n        </div>\n    )\n}","import React from 'react';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport storage from './store';\nimport ListOfThemes from './components/ListOfThemes';\nimport ListOfArticles from './containers/ListOfArticles';\nimport UndoRedo from './containers/UndoRedo';\n\nconst { store, persistor } = storage();\n\nconst App = () => (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <ListOfThemes />\n            <ListOfArticles />\n            <UndoRedo />\n        </PersistGate>\n    </Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}